{"version":3,"sources":["acorn-umd.js"],"names":[],"mappings":"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","file":"acorn-umd.js","sourcesContent":["(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('lodash'), require('acorn/util/walk'), require('walkall')) :\n  typeof define === 'function' && define.amd ? define(['lodash', 'acorn/util/walk', 'walkall'], factory) :\n  global.acornUmd = factory(global.lodash, global.walk, global.walkall)\n}(this, function (lodash, walk, walkall) { 'use strict';\n\n  const isRequireCallee = lodash.matches({\n    name: 'require',\n    type: 'Identifier'\n  });\n\n  // Set up an AST Node similar to an ES6 import node\n  function constructImportNode(node, type) {\n    let {start, end} = node;\n    return {\n      type: type,\n      reference: node,\n      specifiers: [],\n      start, end\n    };\n  }\n\n  function constructCJSImportNode(node) {\n    let result = constructImportNode(node, 'CJSImport');\n    let importExpr, isVariable = false;\n\n    switch (node.type) {\n      case 'CallExpression':\n        importExpr = node;\n        break;\n      case 'VariableDeclaration':\n        isVariable = true;\n        /* falls through */\n      case 'Property': {\n        let declaration = isVariable ? node.declarations[0] : node;\n        // init for var, value for property\n        let value = declaration.init || declaration.value;\n        if (lodash.isMatch(value, { type: 'CallExpression' })) {\n          importExpr = value;\n        }\n\n        let source = isVariable ? declaration.id : declaration.key;\n\n        // Add the specifier\n        let {name, type, start, end} = source;\n        result.specifiers.push({\n          start, end,\n          type: 'ImportSpecifier',\n          id: {\n            type, start, end, name\n          },\n          default: isVariable\n        });\n      }\n    }\n\n    let {value, raw, start, end} = importExpr.arguments[0];\n    result.source = {\n      type: 'Literal',\n      reference: node,\n      value, raw, start, end\n    };\n\n    return result;\n  }\n\n  function findCJS(ast) {\n    // Recursively walk ast searching for requires\n    let requires = [];\n    walk.simple(ast, walkall.makeVisitors(function(node) {\n      let expr;\n      switch (node.type) {\n        case 'CallExpression':\n          expr = node;\n          break;\n        case 'Property':\n        case 'VariableDeclaration':\n          let declaration = node.declarations ? node.declarations[0] : node;\n          // init for var, value for property\n          let value = declaration.init || declaration.value;\n          if (lodash.isMatch(value, { type: 'CallExpression' })) {\n            expr = value;\n          }\n      }\n      if (expr && isRequireCallee(expr.callee)) {\n        requires.push(node);\n      }\n    }), walkall.traversers);\n\n    return lodash(requires)\n      // Filter the overlapping requires (e.g. if var x = require('./x') it'll show up twice).\n      // Do this by just checking line #'s\n      .reject(node => {\n        return lodash.any(requires, parent =>\n          [node.start, node.stop].some(pos => lodash.inRange(pos, parent.start + 0.1, parent.end)));\n      })\n      .map(constructCJSImportNode)\n      .value();\n  }\n\n  var acorn_umd = function(ast, options) {\n    options = lodash.extend({\n      cjs: true,\n      // TODO\n      amd: false,\n      es6: true\n    }, options);\n\n\n    let result = [];\n\n    if (options.cjs) {\n      result.push(...findCJS(ast));\n    }\n\n    if (options.es6) {\n      result.push(...lodash.filter(ast.body, {\n        type: 'ImportDeclaration'\n      }));\n    }\n\n    return result;\n  }\n\n  return acorn_umd;\n\n}));\n"],"sourceRoot":"/source/"}